// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MCLauncher2MultiMC;
//
//    var launcherProfiles = LauncherProfiles.FromJson(jsonString);

namespace MCLauncher2MultiMC
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using Bluscream;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class LauncherProfile
    {
        public string Id { get; set; }
        public string Name { get
            {
                return this.Data.Name ?? this.Id;
            } }
        public Profile Data { get; set; }
        public MMCInstance MMCInstance { get; set; }
        public LauncherProfile(string id, Profile profile)
        {
            this.Id = id;
            this.Data = profile;
            this.MMCInstance = new MMCInstance(this, Program.MMCInstancesDir.Combine(this.Data.Name));
        }
    }

    public partial class LauncherProfiles
    {
        [JsonProperty("authenticationDatabase", NullValueHandling = NullValueHandling.Ignore)]
        public AuthenticationDatabase AuthenticationDatabase { get; set; }

        [JsonProperty("clientToken", NullValueHandling = NullValueHandling.Ignore)]
        public string ClientToken { get; set; }

        [JsonProperty("launcherVersion", NullValueHandling = NullValueHandling.Ignore)]
        public LauncherVersion LauncherVersion { get; set; }

        [JsonProperty("profiles", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, Profile> Profiles { get; set; }

        [JsonProperty("selectedUser", NullValueHandling = NullValueHandling.Ignore)]
        public SelectedUser SelectedUser { get; set; }

        [JsonProperty("settings", NullValueHandling = NullValueHandling.Ignore)]
        public Settings Settings { get; set; }
    }

    public partial class AuthenticationDatabase
    {
    }

    public partial class Profiles
    {
    }

    public partial class LauncherVersion
    {
        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public long? Format { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("profilesFormat", NullValueHandling = NullValueHandling.Ignore)]
        public long? ProfilesFormat { get; set; }
    }

    public partial class Profile
    {
        [JsonProperty("created", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("lastUsed", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastUsed { get; set; }

        [JsonProperty("lastVersionId", NullValueHandling = NullValueHandling.Ignore)]
        public string LastVersionId { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("javaArgs", NullValueHandling = NullValueHandling.Ignore)]
        public string JavaArgs { get; set; }

        [JsonProperty("javaDir", NullValueHandling = NullValueHandling.Ignore)]
        public FileInfo? JavaDir { get; set; }
    }

    public partial class SelectedUser
    {
        [JsonProperty("account", NullValueHandling = NullValueHandling.Ignore)]
        public string Account { get; set; }

        [JsonProperty("profile", NullValueHandling = NullValueHandling.Ignore)]
        public string Profile { get; set; }
    }

    public partial class Settings
    {
        [JsonProperty("crashAssistance", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CrashAssistance { get; set; }

        [JsonProperty("enableAdvanced", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableAdvanced { get; set; }

        [JsonProperty("enableAnalytics", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableAnalytics { get; set; }

        [JsonProperty("enableHistorical", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableHistorical { get; set; }

        [JsonProperty("enableReleases", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableReleases { get; set; }

        [JsonProperty("enableSnapshots", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableSnapshots { get; set; }

        [JsonProperty("keepLauncherOpen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? KeepLauncherOpen { get; set; }

        [JsonProperty("profileSorting", NullValueHandling = NullValueHandling.Ignore)]
        public string ProfileSorting { get; set; }

        [JsonProperty("showGameLog", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowGameLog { get; set; }

        [JsonProperty("showMenu", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowMenu { get; set; }

        [JsonProperty("soundOn", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SoundOn { get; set; }
    }

    public partial class LauncherProfiles
    {
        public static LauncherProfiles FromJson(string json) => JsonConvert.DeserializeObject<LauncherProfiles>(json, MCLauncher2MultiMC.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LauncherProfiles self) => JsonConvert.SerializeObject(self, MCLauncher2MultiMC.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
